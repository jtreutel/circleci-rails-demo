version: 2.1

orbs:
  heroku: circleci/heroku@0.0.8

app_env: &app_env
  environment:
    NODE_VERSION: 1.10.6
    YARN_VERSION: 1.17.0
    BUNDLER_VERSION: 2.0.2
    BUNDLE_PATH: vendor/bundle
    GEM_HOME: .gem
    GEM_PATH: .gem
    RAILS_ENV: test
    DATABASE_HOST: 127.0.0.1
    TESTOPTS: "--ci-dir=test/reports"

executors:
  ruby-node:
    docker:
      - image: circleci/ruby:2.6.6-node
        <<: *app_env
  ruby-node-postgres:
    docker:
      - image: circleci/ruby:2.6.6-node
        <<: *app_env
      - image: circleci/postgres:11-alpine
        environment:
          POSTGRES_DB: rails_db
          POSTGRES_USER: rails_db_user
          POSTGRES_PASSWORD: rails_db_pw

jobs:

  # Scan for vulnerabilities in ruby dependencies using bundler_audit
  ruby_dependency_scan:
    executor: ruby-node
    resource_class: small
    steps:
      - checkout
      - run:
          name: Install bundler-audit 0.7
          command: sudo gem install bundler-audit -v 0.7
      - run:
          name: Run bundle-audit
          command: sudo bundle-audit check --update

  #
  # Build jobs
  #

  # Install ruby dependencies
  build_ruby:
    executor: ruby-node
    steps:
      - checkout

      - run:
          name: Install bundler
          command: gem install bundler -v $BUNDLER_VERSION

      - restore_cache:
          keys:
            - Gemfile-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
            - Gemfile-{{ .Branch }}
            - Gemfile-

      - run:
          name: Install ruby dependencies
          command: bundle install
      
      - run:
          name: Check rails works
          command: bundle exec rails --version
      
      - save_cache:
          key: Gemfile-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
      
      - persist_to_workspace:
          root: .
          paths:
            - vendor/bundle
            - .gem
  
  # Install JS dependencies
  build_js:
    executor: ruby-node
    steps:
      - checkout

      - restore_cache:
          keys:
            - npm-{{ .Branch }}-{{ checksum "yarn.lock" }}
            - npm-{{ .Branch }}
            - npm-

      - run:
          name: Install JS dependencies
          command: yarn install

      - save_cache:
          key: npm-{{ .Branch }}-{{ checksum "yarn.lock" }}
          paths:
            - node_modules
      
      - persist_to_workspace:
          root: .
          paths:
            - node_modules
  
  #
  # Test jobs
  #
  
  test_rails:
    executor: ruby-node-postgres
    steps:
      - checkout

      - attach_workspace:
          at: .
      
      - run:
          name: Wait for db
          command: |
            dockerize -wait tcp://localhost:5432 -timeout 1m

      - run:
          name: Setup database
          command: bundle exec rails db:create db:schema:load

      - run:
          name: Run rails tests
          command: bundle exec rails test

      - store_test_results:
          path: test/reports

      - store_artifacts:
          path: test/reports
  
  test_js:
    executor: ruby-node
    steps:
      - checkout

      - attach_workspace:
          at: .

      - run:
          name: Run JS tests
          # TODO
          command: yarn --version
  
  #
  # Deploy Jobs
  #

  deploy_database_migrations:
    executor: ruby-node
    resource_class: small
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run: bundle exec rails db:migrate RAILS_ENV=production
  
  deploy_terraform:
    docker:
      - image: hashicorp/terraform:0.12.29
        environment:
          TF_IN_AUTOMATION: true
    resource_class: small
    steps:
      - checkout
      - run:
          name: Terraform init
          command: | 
            cd terraform
            terraform init -input=false
      - run:
          name: Terraform plan
          command: |
            cd terraform
            terraform plan -input=false
      - run:
          name: Terraform apply
          command: |
            cd terraform
            terraform apply -input=false -auto-approve

workflows:
  build_and_test:
    jobs:
      - ruby_dependency_scan
      - build_ruby
      - build_js
      - test_js:
          requires: 
           - build_ruby
           - build_js
      - test_rails:
          requires:
           - build_ruby
           - build_js
      - hold_for_deploy:
          type: approval
          requires:
            - ruby_dependency_scan
            - test_rails
            - test_js
          filters:
            branches:
              only: master
      - deploy_database_migrations:
          requires:
           - hold_for_deploy
          context: jennings-rails-demo
      - deploy_terraform:
          requires:
            - hold_for_deploy
          context: jennings-rails-demo
      - heroku/deploy-via-git:
          requires:
            - deploy_database_migrations
            - deploy_terraform
          context: jennings-rails-demo
  nightly_security_scan:
    jobs:
      - ruby_dependency_scan
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches: 
              only: master